// grammar-exercise-logic.js
document.addEventListener('DOMContentLoaded', () => {
    // --- –ë–ê–ó–ê –î–ê–ù–ù–´–• –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –û–¢–í–ï–¢–ê–ú–ò –ò –û–ë–™–Ø–°–ù–ï–ù–ò–Ø–ú–ò –î–õ–Ø A1 ---
    // –ö–ª—é—á: data-form-id_qN (–Ω–∞–ø—Ä–∏–º–µ—Ä, a1_ps_ex1_q1, a1_ps_ex2_q1)
    const grammarCorrectAnswers = {
        // A1 - Present Simple - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (ID —Ñ–æ—Ä–º—ã: a1_ps_ex1)
        "a1_ps_ex1_q1": { correct: "b", explanation: "–î–ª—è 'My brother' (he) –≤ Present Simple –∫ –≥–ª–∞–≥–æ–ª—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è -s: plays." },
        "a1_ps_ex1_q2": { correct: "a", explanation: "–î–ª—è 'We' –≤ Present Simple –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–∞: go." },
        // A1 - Present Simple - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (ID —Ñ–æ—Ä–º—ã: a1_ps_ex2)
        "a1_ps_ex2_q1": { correct: "b", explanation: "–î–ª—è 'she' –≤ –≤–æ–ø—Ä–æ—Å–µ Present Simple –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≥–ª–∞–≥–æ–ª 'Does'." },
        "a1_ps_ex2_q2": { correct: "b", explanation: "–î–ª—è 'They' –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏ Present Simple –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'do not' (don't)." },
        // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–ª—é—á–∏ –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ Present Simple, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–¥–∏—Ç–µ –∏—Ö –≤ HTML

        // A1 - Present Continuous - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (ID —Ñ–æ—Ä–º—ã: a1_pc_ex1)
        "a1_pc_ex1_q1": { correct: "b", explanation: "'Look!' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ —Å–µ–π—á–∞—Å. 'The children' (they) + are + V-ing: are playing." },
        "a1_pc_ex1_q2": { correct: "b", explanation: "'right now' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–æ–º–µ–Ω—Ç —Ä–µ—á–∏. I + am + V-ing: am reading." },
        // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–ª—é—á–∏ –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ Present Continuous

        // A1 - Past Simple - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (ID —Ñ–æ—Ä–º—ã: a1_past_s_ex1)
        "a1_past_s_ex1_q1": { correct: "c", explanation: "'last Sunday' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ—à–ª–æ–µ. 'go' - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–ª–∞–≥–æ–ª, –µ–≥–æ —Ñ–æ—Ä–º–∞ –≤ Past Simple - 'went'." },
        "a1_past_s_ex1_q2": { correct: "b", explanation: "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ –≤ Past Simple: did not (didn't) + –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤ –≥–ª–∞–≥–æ–ª–∞ (visit)." },
        // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–ª—é—á–∏ –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ Past Simple

        // A1 - Articles - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (ID —Ñ–æ—Ä–º—ã: a1_art_ex1)
        "a1_art_ex1_q1": { correct: "b", explanation: "'interesting' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≥–ª–∞—Å–Ω–æ–≥–æ –∑–≤—É–∫–∞, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'an'." },
        "a1_art_ex1_q2": { correct: "c", explanation: "–ì–æ–≤–æ—Ä—è—â–∏–π –ø—Ä–æ—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–æ–ª—å (—Ç—É, —á—Ç–æ –Ω–∞ —Å—Ç–æ–ª–µ), –ø–æ—ç—Ç–æ–º—É 'the'." },
        "a1_art_ex1_q3": { correct: "a", explanation: "–ì–æ–≤–æ—Ä–∏–º –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ –æ–±—â–µ–º, 'doctor' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–æ–≥–ª–∞—Å–Ω–æ–≥–æ –∑–≤—É–∫–∞, –ø–æ—ç—Ç–æ–º—É 'a'." },
        // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–ª—é—á–∏ –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ Articles


        // =============================================================
        // –ó–ê–ü–û–õ–ù–ò–¢–ï –û–¢–í–ï–¢–´ –î–õ–Ø –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –¢–ï–ú –ò –£–ü–†–ê–ñ–ù–ï–ù–ò–ô A1
        // Future Simple, Nouns, Adjectives, Adverbs, Prepositions, Conjunctions, Question Forms, Imperatives
        // =============================================================
        // –ü—Ä–∏–º–µ—Ä –¥–ª—è –±—É–¥—É—â–µ–π —Ç–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, Nouns, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1:
        // "a1_nouns_ex1_q1": { correct: "a", explanation: "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ Nouns." },
        // "a1_nouns_ex1_q2": { correct: "c", explanation: "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ Nouns." },
    };

    const checkButtons = document.querySelectorAll('.check-grammar-answers-btn');

    checkButtons.forEach(button => {
        button.addEventListener('click', function() {
            const formIdSuffix = this.dataset.formId; // e.g., "a1_ps_ex1", "a1_pc_ex1"
            const formElement = this.closest('.grammar-exercises-form');
            if (!formElement) {
                console.error("Could not find parent form for button with data-form-id:", formIdSuffix);
                return;
            }
            const exercisesInForm = formElement.querySelectorAll('.grammar-exercise'); // –≠—Ç–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã/–∑–∞–¥–∞–Ω–∏—è
            const feedbackDiv = formElement.querySelector('.grammar-feedback');
            let allCorrect = true;
            let feedbackHTML = `<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è "${this.textContent.replace('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ', '')}":</h4>`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            let exercisesAttempted = 0;

            exercisesInForm.forEach((exerciseDiv, index) => {
                const questionNumber = index + 1; // –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (—Ñ–æ—Ä–º—ã)
                // –ò–º—è —Ä–∞–¥–∏–æ-–≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "q1_a1_ps_ex1"
                // –û–Ω–æ –±–µ—Ä–µ—Ç—Å—è –∏–∑ HTML
                const firstRadioInQuestion = exerciseDiv.querySelector('.exercise-options input[type="radio"]');
                if (!firstRadioInQuestion) {
                    console.warn(`No radio buttons found for question ${questionNumber} in form ${formIdSuffix}`);
                    return; 
                }
                const radioGroupName = firstRadioInQuestion.name;

                const questionTextP = exerciseDiv.querySelector('p strong');
                if (!questionTextP) return;
                const questionFullText = questionTextP.textContent;
                const questionShortText = questionFullText.includes('. ') ? questionFullText.substring(questionFullText.indexOf('. ') + 2) : questionFullText;

                const selectedOption = exerciseDiv.querySelector(`input[name="${radioGroupName}"]:checked`);
                

                feedbackHTML += `<p><strong>–í–æ–ø—Ä–æ—Å ${questionNumber}:</strong> ${questionShortText}</p>`;

                if (selectedOption) {
                    exercisesAttempted++;
                    const userAnswer = selectedOption.value;
                    // –ö–ª—é—á –¥–ª—è correctAnswersData: data-form-id –∫–Ω–æ–ø–∫–∏ + _qN
                    const answerKey = `${formIdSuffix}_q${questionNumber}`;
                    const correctAnswerInfo = grammarCorrectAnswers[answerKey];

                    if (correctAnswerInfo && userAnswer.toLowerCase() === correctAnswerInfo.correct.toLowerCase()) {
                        feedbackHTML += `<p class="correct">–í–∞—à –æ—Ç–≤–µ—Ç: "${selectedOption.parentElement.textContent.trim()}" - –í–µ—Ä–Ω–æ! ‚úÖ</p>`;
                    } else {
                        allCorrect = false;
                        feedbackHTML += `<p class="incorrect">–í–∞—à –æ—Ç–≤–µ—Ç: "${selectedOption.parentElement.textContent.trim()}" - –ù–µ–≤–µ—Ä–Ω–æ. ‚ùå</p>`;
                        if (correctAnswerInfo) {
                            const correctLabelElement = exerciseDiv.querySelector(`.exercise-options input[value="${correctAnswerInfo.correct.toLowerCase()}"]`);
                            const correctLabelText = correctLabelElement ? correctLabelElement.parentElement.textContent.trim() : `(–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${correctAnswerInfo.correct})`;
                            feedbackHTML += `<p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "${correctLabelText}"</p>`;
                        } else {
                            feedbackHTML += `<p><em>(–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${answerKey})</em></p>`;
                        }
                    }
                    if (correctAnswerInfo && correctAnswerInfo.explanation) {
                        feedbackHTML += `<p class="explanation-text"><i>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${correctAnswerInfo.explanation}</i></p>`;
                    }
                } else {
                    allCorrect = false;
                    feedbackHTML += `<p class="incorrect">–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç. ‚ùå</p>`;
                }
                if (index < exercisesInForm.length - 1) {
                    feedbackHTML += '<hr>';
                }
            });

            if (exercisesAttempted === 0 && exercisesInForm.length > 0) {
                 feedbackHTML = `<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è "${this.textContent.replace('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ', '')}":</h4><p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.</p>`;
            } else if (exercisesAttempted > 0 && allCorrect) {
                feedbackHTML = `<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è "${this.textContent.replace('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ', '')}":</h4><p class="correct" style="text-align:center; font-weight:bold; font-size:1.2em;">–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã! –û—Ç–ª–∏—á–Ω–æ! üéâ</p><hr>` + feedbackHTML;
            }


            if (feedbackDiv) {
                feedbackDiv.innerHTML = feedbackHTML;
                feedbackDiv.style.display = 'block';
                const headerOffset = document.querySelector('header')?.offsetHeight || 70;
                const elementPosition = feedbackDiv.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
                
                window.scrollTo({
                     top: offsetPosition,
                     behavior: "smooth"
                });
            } else {
                console.error("Feedback div not found in form associated with button:", formIdSuffix);
            }
        });
    });
});
