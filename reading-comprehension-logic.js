// reading-comprehension-logic.js
document.addEventListener('DOMContentLoaded', () => {
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
    // –ö–ª—é—á - —ç—Ç–æ data-form-id –∫–Ω–æ–ø–∫–∏ + _qN (–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞)
    const correctAnswersData = {
        // A1 - –¢–µ–∫—Å—Ç 1: My Pet Rabbit
        "a1_rabbit_q1": { correct: "c", explanation: "The text says: 'It is a rabbit.'" },
        "a1_rabbit_q2": { correct: "b", explanation: "The text mentions: 'Fluffy is white.'" },
        "a1_rabbit_q3": { correct: "c", explanation: "The text states: 'Fluffy likes carrots and green leaves.'" },

        // A2 - –¢–µ–∫—Å—Ç 1: A Day at the Beach
        "a2_beach_q1": { correct: "b", explanation: "The text says: 'The weather was sunny and warm.'" },
        "a2_beach_q2": { correct: "b", explanation: "The text mentions: 'My brother, Sam, and I built a large sandcastle...'" },
        "a2_beach_q3": { correct: "c", explanation: "The text states: 'For lunch, we had sandwiches and fruit.'" },

        // B1 - –¢–µ–∫—Å—Ç 1: My First Job Interview (–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è)
        "b1_interview_q1": { correct: "b", explanation: "The narrator applied for a position as a 'junior marketing assistant'." },
        "b1_interview_q2": { correct: "c", explanation: "The text says: 'On the day, I was incredibly nervous...'" },
        "b1_interview_q3": { correct: "b", explanation: "The result was positive: 'A week later, they called to offer me the job!'" },

        // B2 - –¢–µ–∫—Å—Ç 1: The Importance of Urban Green Spaces (–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
        "b2_green_q1": { correct: "b", explanation: "Increasing property values is not mentioned as a direct benefit in this text." },
        "b2_green_q2": { correct: "b", explanation: "The urban heat island effect is when cities are warmer than surrounding rural areas, and green spaces help mitigate this." },
        "b2_green_q3": { correct: "c", explanation: "The passage concludes that 'planning and preservation of these green oases are becoming increasingly vital' for sustainable futures." },

        // C1 - –¢–µ–∫—Å—Ç 1: The Nuances of Cross-Cultural Communication (–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
        "c1_culture_q1": { correct: "b", explanation: "The text emphasizes 'a profound understanding of implicit cultural norms, varying communication styles, and non-verbal cues'." },
        "c1_culture_q2": { correct: "b", explanation: "High-context cultures 'rely heavily on shared experiences and unspoken understandings, where meaning is often embedded in the context'." },
        "c1_culture_q3": { correct: "c", explanation: "The passage states that 'potential misunderstandings that can hinder international collaborations' arise from not navigating cultural subtleties." }
    };

    const checkButtons = document.querySelectorAll('.check-reading-answers-btn');

    checkButtons.forEach(button => {
        button.addEventListener('click', function() {
            const formId = this.dataset.formId; // e.g., "a1_rabbit", "b2_green"
            const form = this.closest('.reading-questions-form');
            const questions = form.querySelectorAll('.reading-question');
            const feedbackDiv = form.querySelector('.reading-feedback');
            let allCorrectTracker = true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            let feedbackHTML = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>';
            let questionsAnswered = 0;

            questions.forEach((questionDiv, index) => {
                const questionNumber = index + 1;
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥–ª—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ formId (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
                // –∏ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è formId="a1_rabbit", questionNumber=1 -> name="q1_a1"
                const namePrefix = formId.substring(0, formId.indexOf('_')); // "a1" from "a1_rabbit"
                const radioName = `q${questionNumber}_${namePrefix}`; // "q1_a1"

                const questionTextP = questionDiv.querySelector('p strong');
                if (!questionTextP) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞
                const questionFullText = questionTextP.textContent;
                const questionShortText = questionFullText.includes('. ') ? questionFullText.substring(questionFullText.indexOf('. ') + 2) : questionFullText;


                const selectedOption = questionDiv.querySelector(`input[name="${radioName}"]:checked`);
                questionsAnswered++;

                feedbackHTML += `<p><strong>–í–æ–ø—Ä–æ—Å ${questionNumber}:</strong> ${questionShortText}</p>`;

                if (selectedOption) {
                    const userAnswer = selectedOption.value;
                    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è correctAnswersData: formId + _q + questionNumber
                    const answerKey = `${formId}_q${questionNumber}`;
                    const correctAnswerInfo = correctAnswersData[answerKey];

                    if (correctAnswerInfo && userAnswer.toLowerCase() === correctAnswerInfo.correct.toLowerCase()) {
                        feedbackHTML += `<p class="correct">–í–∞—à –æ—Ç–≤–µ—Ç: "${selectedOption.parentElement.textContent.trim()}" - –í–µ—Ä–Ω–æ! ‚úÖ</p>`;
                    } else {
                        allCorrectTracker = false;
                        feedbackHTML += `<p class="incorrect">–í–∞—à –æ—Ç–≤–µ—Ç: "${selectedOption.parentElement.textContent.trim()}" - –ù–µ–≤–µ—Ä–Ω–æ. ‚ùå</p>`;
                        if (correctAnswerInfo) {
                            const correctLabelElement = questionDiv.querySelector(`input[value="${correctAnswerInfo.correct.toLowerCase()}"]`);
                            const correctLabelText = correctLabelElement ? correctLabelElement.parentElement.textContent.trim() : `(–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${correctAnswerInfo.correct})`;
                            feedbackHTML += `<p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "${correctLabelText}"</p>`;
                        } else {
                            feedbackHTML += `<p><em>(–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)</em></p>`;
                        }
                    }
                    if (correctAnswerInfo && correctAnswerInfo.explanation) {
                        feedbackHTML += `<p class="explanation-text"><i>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${correctAnswerInfo.explanation}</i></p>`;
                    }
                } else {
                    allCorrectTracker = false;
                    feedbackHTML += `<p class="incorrect">–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç. ‚ùå</p>`;
                }
                if (index < questions.length - 1) {
                    feedbackHTML += '<hr>';
                }
            });

            if (questionsAnswered > 0 && allCorrectTracker) {
                feedbackHTML = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4><p class="correct" style="text-align:center; font-weight:bold; font-size:1.2em;">–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã! –û—Ç–ª–∏—á–Ω–æ! üéâ</p><hr>' + feedbackHTML;
            } else if (questionsAnswered === 0) {
                 feedbackHTML = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4><p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.</p>';
            }

            feedbackDiv.innerHTML = feedbackHTML;
            feedbackDiv.style.display = 'block';
            feedbackDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        });
    });
});
