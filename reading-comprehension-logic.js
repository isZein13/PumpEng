// reading-comprehension-logic.js
document.addEventListener('DOMContentLoaded', () => {
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
    // –ö–ª—é—á - —ç—Ç–æ data-form-id –∫–Ω–æ–ø–∫–∏ + _qN (–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞)
    const correctAnswersData = {
        // A1 - –¢–µ–∫—Å—Ç 1: My Cat
        "a1_text1_q1": { correct: "b", explanation: "The cat's name is Tom, as stated in 'His name is Tom.'" },
        "a1_text1_q2": { correct: "c", explanation: "The text says: 'He is black and white.'" },
        "a1_text1_q3": { correct: "b", explanation: "The text mentions: 'He sleeps on my bed.'" },
        // A2 - –¢–µ–∫—Å—Ç 1: My Weekend
        "a2_text1_q1": { correct: "b", explanation: "The text says: 'They live in a small house in the countryside.'" },
        // ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ A2 ...

        // B2 - –¢–µ–∫—Å—Ç 1: The Tetris Effect
        "b2_tetris_q1": { correct: "E", explanation: "The passage states: 'It is also prevalent in computer programmers...'" },
        "b2_tetris_q2": { correct: "B", explanation: "The passage says: '...the game of Tetris took the world by storm...'" },
        "b2_tetris_q3": { correct: "A", explanation: "The main purpose is to describe the 'Tetris effect' syndrome." },
        // ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è B1, C1, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Ç–µ–∫—Å—Ç—ã ...
    };

    const checkButtons = document.querySelectorAll('.check-reading-answers-btn');

    checkButtons.forEach(button => {
        button.addEventListener('click', function() {
            const formId = this.dataset.formId; // –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ä–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "a1_text1")
            const form = this.closest('.reading-questions-form');
            const questions = form.querySelectorAll('.reading-question');
            const feedbackDiv = form.querySelector('.reading-feedback');
            let allCorrect = true;
            let feedbackHTML = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>';

            questions.forEach((questionDiv, index) => {
                const questionNumber = index + 1;
                const questionId = `${formId}_q${questionNumber}`; // –§–æ—Ä–º–∏—Ä—É–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                const questionText = questionDiv.querySelector('p strong').textContent;
                const selectedOption = questionDiv.querySelector(`input[name="q${questionNumber}_${formId.split('_')[0]}"]:checked`); // –ù–∞–ø—Ä–∏–º–µ—Ä, q1_a1, q1_a2

                feedbackHTML += `<p><strong>–í–æ–ø—Ä–æ—Å ${questionNumber}:</strong> ${questionText.split('. ')[1] || questionText}</p>`; // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –≤–æ–ø—Ä–æ—Å–∞

                if (selectedOption) {
                    const userAnswer = selectedOption.value;
                    const correctAnswerInfo = correctAnswersData[questionId];

                    if (correctAnswerInfo && userAnswer.toLowerCase() === correctAnswerInfo.correct.toLowerCase()) {
                        feedbackHTML += `<p class="correct">–í–∞—à –æ—Ç–≤–µ—Ç: "${selectedOption.parentElement.textContent.trim()}" - –í–µ—Ä–Ω–æ! ‚úÖ</p>`;
                    } else {
                        allCorrect = false;
                        feedbackHTML += `<p class="incorrect">–í–∞—à –æ—Ç–≤–µ—Ç: "${selectedOption.parentElement.textContent.trim()}" - –ù–µ–≤–µ—Ä–Ω–æ. ‚ùå</p>`;
                        if (correctAnswerInfo) {
                            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            const correctLabel = questionDiv.querySelector(`input[value="${correctAnswerInfo.correct.toLowerCase()}"]`)?.parentElement.textContent.trim() || correctAnswerInfo.correct;
                            feedbackHTML += `<p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "${correctLabel}"</p>`;
                        }
                    }
                    if (correctAnswerInfo && correctAnswerInfo.explanation) {
                        feedbackHTML += `<p class="explanation-text"><i>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${correctAnswerInfo.explanation}</i></p>`;
                    }
                } else {
                    allCorrect = false;
                    feedbackHTML += `<p class="incorrect">–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç. ‚ùå</p>`;
                }
                feedbackHTML += '<hr style="border-top: 1px dashed #eee; margin: 10px 0;">';
            });
             feedbackHTML = feedbackHTML.slice(0, -1 * '<hr style="border-top: 1px dashed #eee; margin: 10px 0;">'.length); // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π hr


            if (allCorrect && questions.length > 0) {
                feedbackHTML = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4><p class="correct" style="text-align:center; font-weight:bold; font-size:1.2em;">–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã! –û—Ç–ª–∏—á–Ω–æ! üéâ</p>' + feedbackHTML;
            }
            feedbackDiv.innerHTML = feedbackHTML;
            feedbackDiv.style.display = 'block';
            feedbackDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        });
    });
});
